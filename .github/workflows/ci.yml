name: CI

on:
  push:
    branches: [ main, develop, refactor-exchange-api-service-container ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install dependencies
      run: poetry install --with dev
    
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Run Pylint and generate badge
      run: |
        mkdir -p .github/badges
        poetry run pylint src/ --disable=all --enable=E,W --output-format=text --reports=yes > pylint-report.txt || true
        PYLINT_SCORE=$(poetry run pylint src/ --disable=all --enable=E,W --output-format=text --reports=yes | grep "Your code has been rated at" | awk '{print $7}' | sed 's|/10||' || echo "0.0")
        echo "Pylint score: $PYLINT_SCORE"
        
        # Generate color based on score
        if (( $(echo "$PYLINT_SCORE >= 9.0" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$PYLINT_SCORE >= 8.0" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$PYLINT_SCORE >= 7.0" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$PYLINT_SCORE >= 6.0" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$PYLINT_SCORE >= 5.0" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        # Create badge JSON
        cat > .github/badges/pylint.json << EOF
        {
          "schemaVersion": 1,
          "label": "pylint",
          "message": "${PYLINT_SCORE}/10",
          "color": "${COLOR}"
        }
        EOF
        
        cat .github/badges/pylint.json

    - name: Generate test coverage badge
      run: |
        mkdir -p .github/badges
        # Extract coverage percentage from coverage.xml
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'{coverage:.1f}')
        except:
            print('0.0')
        ")
        
        echo "Coverage: $COVERAGE%"
        
        # Generate color based on coverage
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        # Create badge JSON
        cat > .github/badges/coverage.json << EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${COVERAGE}%",
          "color": "${COLOR}"
        }
        EOF
        
        cat .github/badges/coverage.json

    - name: Commit badge files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .github/badges/ || true
        git commit -m "Update badges [skip ci]" || true
    
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
      if: github.event_name == 'push'

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --with dev
    
    - name: Run Ruff
      run: poetry run ruff check src/ --output-format=github
    
    - name: Run Pylint
      run: poetry run pylint src/ --output-format=text --reports=yes