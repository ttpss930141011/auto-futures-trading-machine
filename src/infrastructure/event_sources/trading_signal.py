"""Trading signal event source for futures trading machine.

This module defines TradingSignal events and their source.
Trading signals represent instructions to enter or exit a trading position.
"""
from typing import Any, Awaitable, Callable, List, Optional
import datetime

from src.infrastructure.events.event import Event, FifoQueueEventSource, Producer
from src.infrastructure.events.dispatcher import RealtimeDispatcher, EventHandler
from src.domain.value_objects import OrderOperation


class TradingSignal(Event):
    """A trading signal event that instructs to buy or sell a given commodity.
    
    Trading signals are the outputs of trading strategies and inputs to
    order execution components. They represent decisions to enter or exit
    trading positions.
    
    Args:
        when: The datetime when the trading signal occurred
        operation: The trading operation (BUY or SELL)
        commodity_id: The ID of the commodity to trade
    """
    def __init__(self, when: datetime.datetime, operation: OrderOperation, commodity_id: str):
        super().__init__(when)
        #: The trading operation (BUY or SELL)
        self.operation = operation
        #: The ID of the commodity to trade
        self.commodity_id = commodity_id
        
    def __str__(self) -> str:
        """String representation of the trading signal.
        
        Returns:
            A human-readable description of the signal
        """
        return f"TradingSignal: {self.operation.name} {self.commodity_id} at {self.when}"


class TradingSignalSource(FifoQueueEventSource):
    """Source for trading signal events.
    
    This class provides a buffer for trading signals generated by strategies,
    and allows subscription to these signals for order execution.
    
    Args:
        dispatcher: The event dispatcher to use for signal distribution
        producer: Optional producer associated with this source
        events: Optional list of initial signals
    """
    def __init__(
            self, 
            dispatcher: RealtimeDispatcher, 
            producer: Optional[Producer] = None, 
            events: Optional[List[Event]] = None
    ):
        super().__init__(producer=producer, events=events)
        self._dispatcher = dispatcher
        
        # Register with the dispatcher for source-based subscriptions
        dispatcher.subscribe(self, self._dispatch_signal)
    
    def push(self, signal: TradingSignal) -> None:
        """Add a trading signal to the queue and publish to subscribers.
        
        Args:
            signal: The trading signal to add
        """
        # Add to the queue (for source-based subscribers)
        super().push(signal)
        
        # Also publish as an event type for type-based subscribers
        self._dispatcher.publish_event("TRADING_SIGNAL", signal)
    
    async def _dispatch_signal(self, signal: TradingSignal) -> None:
        """Default handler for signals from this source.
        
        This allows signals to be processed both through the FifoQueueEventSource
        mechanism and the event type subscription mechanism.
        
        Args:
            signal: The trading signal to dispatch
        """
        # The dispatcher will automatically dispatch this to any subscribers
        pass
    
    def subscribe_to_trading_signals(self, handler: Callable[[TradingSignal], Awaitable[Any]]) -> None:
        """Register a handler for trading signals.
        
        Args:
            handler: Function to call when a new trading signal is available
        """
        self._dispatcher.subscribe(self, handler)